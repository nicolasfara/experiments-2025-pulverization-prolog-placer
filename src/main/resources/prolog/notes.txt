%%% TODOs
% @SF
% TODO: deploymentUnit(Type, Id, HWReqs, LatToK). ?

% @RC
% TODO: generare specifiche di physical devices e di logical devices    
    % nodi applicativi: business logic dell'applicazione
    % nodi infrastrutturali: runtime support a tutto il sistema

% TODO: continuous reasoning necessario per gestire dinamismo del programma aggregato e della rete
% TODO: continuous reasoning + adaptation overhead per ciascun componente
% TODO: how to embed adaptive frequency of updates? 
% TODO: add bw in the digital device components?   
% TODO: check "correctness" of the specification


/*
Generazione di deployment di logical device all'interno di sistemi di aggregate computing p olverizzati che ottimizzano consumo energetico attraverso specifica dichiarativa.
PROs:

- dichiaratività sia per esprimere requisiti che vincoli come proprietà sul sistema
- estensibilità
- possibilità di scrivere policy ad-hoc
- applicabilità a "sotto-area"

CONTRO:

- ricerca esaustiva (costosa!)
- vincoli numerici ~
- per ora non incrementale il calcolo dei costi ...

Alternative:

- policy statica non adattiva (all-edge, all-cloud)
- MILP - meno leggibile
- SAT-solvers 
*/

/* TOY EXAMPLE:
% % digitalDevice(Id, K, [S, A, B, C]).
digitalDevice(d1, kd1, [s1, a1, b1, c1]).

% Pulverised components are represented as in:
% knowledge(DId, HWReqs).
knowledge(kd1, 1). 
% behaviour(BId, HWReqs, LatToK).
behaviour(b1, 1, 10).
% communication(CId, HWReqs, LatToK).
communication(c1, 1, 20).
% sense(PhySense, HWReqs, LatToK).
sense(s1, 0.25, 5).
% act(AId, HWReqs, LatToK).
act(a1, 0.25, 5).

% link(N1,N2,Latency,Bandwidth). % end-to-end links
link(robot1, robot2, 4, 50).
link(robot2, robot1, 4, 50).
link(robot2, cloudvm, 4, 50).
link(cloudvm, robot2, 4, 50).
link(robot1, cloudvm, 4, 50).
link(cloudvm, robot1, 4, 50).

%% Hardware
% physicalDevice(Id, AvailableHWCaps, TotalHWCaps, ReachableSensors, ReachableActuators).
%link(N1, N2, Latency, Bandwidth).
% energyConsumption(N, Load, EnergyPerLoad) :- ...
physicalDevice(robot1, 0.3, 5, [(s1, temperature)], [(a1, thermostate)]).
    energySourceMix(robot1,[(0.8,coal), (0.2,solar)]).
    pue(robot1,1.2).
    energyConsumption(robot1, L, 0.2) :- L < 20.
    energyConsumption(robot1, L, 0.3) :- L >= 20.

physicalDevice(robot2, 0.3, 5, [(s1, temperature),(s2, temperature)],[(a1, thermostate),(a2, thermostate)]).
    energySourceMix(robot2,[(0.1,gas),(0.8,coal),(0.1,onshorewind)]).
    pue(robot2,1.2).
    energyConsumption(robot2, L, 0.1) :- L < 2.
    energyConsumption(robot2, L, 0.8) :- L >= 2.

physicalDevice(cloudvm, 28, 30, [], []).
    energySourceMix(cloudvm,[(0.3,solar), (0.7,coal)]).
    pue(cloudvm,1.3).
    energyConsumption(cloudvm, L, 0.5) :- L < 10.
    energyConsumption(cloudvm, L, 1) :- L >= 10.
*/